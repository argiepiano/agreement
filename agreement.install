<?php

/**
 * @file
 * Install, update and uninstall functions for Agreement module.
 */

/**
 * Create a default agreement based on current variables.
 *
 * @return array
 *   Agreement type.
 */
function _agreement_default_agreement() {
  $config = config('agreement.settings');
  $text = $config->get('agreement_text');
  $default = array(
    'name' => 'default',
    'type' => 'Default agreement',
    'path' => $config->get('agreement_page_url'),
    'agreement' => $text['value'],
    'settings' => array(
      'role' => array($config->get('agreement_role')),
      'title' => $config->get('agreement_page_title'),
      'format' => $text['format'],
      'frequency' => $config->get('agreement_frequency'),
      'success' => $config->get('agreement_message_success'),
      'failure' => $config->get('agreement_message_failure'),
      'revoked' => $config->get('agreement_message_revoked'),
      'checkbox' => $config->get('agreement_checkbox_text'),
      'submit' => $config->get('agreement_submit_text'),
      'destination' => $config->get('agreement_success_destination'),
      'visibility_settings' => $config->get('agreement_page_visibility_settings'),
      'visibility_pages' => $config->get('agreement_page_visibility_pages'),
      'email_recipient' => $config->get('agreement_email_recipient'),
      'reset_date' => $config->get('agreement_reset'),
    ),
  );
  return $default;
}

/**
 * Implements hook_install().
 */
function agreement_install() {
  // Set module weight.
  $n = db_update('system')->condition('name', 'agreement', '=')->fields(array('weight' => 9999))->execute();

  if ($n <> 1) {
    backdrop_set_message(st('Could not set agreement module weight.'), 'error');
  }

  // Add a default agreement.
  $default = (object) _agreement_default_agreement();
  $default->settings = serialize($default->settings);
  backdrop_write_record('agreement_type', $default);
}

/**
 * Implements hook_schema().
 */
function agreement_schema() {
  $schema['agreement'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => 'default',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'agreed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'sid' => array(
        'type' => 'varchar',
        'length' => 46,
      ),
      'agreed_date' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'type_uid' => array('type', 'uid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function agreement_update_last_removed() {
  return 7205;
}

/**
 * Migrate agreement variables to config.
 */
function agreement_update_1000() {
  $config = config('agreement.settings');
  $config->set('agreement_page_title', update_variable_get('agreement_page_title', 'Our Agreement'));
  $config->set('agreement_page_url', update_variable_get('agreement_page_url', 'agreement'));
  $config->set('agreement_text', update_variable_get('agreement_text', 'dynamic value in file /agreement/agreement.install line 15'));
  $config->set('agreement_role', update_variable_get('agreement_role', '2'));
  $config->set('agreement_frequency', update_variable_get('agreement_frequency', '0'));
  $config->set('agreement_message_success', update_variable_get('agreement_message_success', 'Thank you for accepting our agreement.'));
  $config->set('agreement_message_failure', update_variable_get('agreement_message_failure', 'You must accept our agreement to continue.'));
  $config->set('agreement_message_revoked', update_variable_get('agreement_message_revoked', 'You successfully revoked your acceptance of our agreement.'));
  $config->set('agreement_checkbox_text', update_variable_get('agreement_checkbox_text', 'I agree.'));
  $config->set('agreement_submit_text', update_variable_get('agreement_submit_text', 'Submit'));
  $config->set('agreement_success_destination', update_variable_get('agreement_success_destination', ''));
  $config->set('agreement_page_visibility_settings', update_variable_get('agreement_page_visibility_settings', '0'));
  $config->set('agreement_page_visibility_pages', update_variable_get('agreement_page_visibility_pages', ''));
  $config->set('agreement_email_recipient', update_variable_get('agreement_email_recipient', ''));
  $config->set('agreement_reset', update_variable_get('agreement_reset', '0'));
  $config->save();

  update_variable_del('agreement_page_title');
  update_variable_del('agreement_page_url');
  update_variable_del('agreement_text');
  update_variable_del('agreement_role');
  update_variable_del('agreement_frequency');
  update_variable_del('agreement_message_success');
  update_variable_del('agreement_message_failure');
  update_variable_del('agreement_message_revoked');
  update_variable_del('agreement_checkbox_text');
  update_variable_del('agreement_submit_text');
  update_variable_del('agreement_success_destination');
  update_variable_del('agreement_page_visibility_settings');
  update_variable_del('agreement_page_visibility_pages');
  update_variable_del('agreement_email_recipient');
  update_variable_del('agreement_reset');
}

/**
 * Set the default role to 'authenticated' rather than '2'.
 */
function agreement_update_1001() {
  if (config_get('agreement.settings', 'agreement_role') == '2') {
    config_set('agreement.settings', 'agreement_role', BACKDROP_AUTHENTICATED_ROLE);
  }
}
/**
 * Move agreement types to config.
 */
function agreement_update_1002() {
  if (db_table_exists('agreement_type')) {
    $query = db_query("
      SELECT agreement_type.*
      FROM 
      {agreement_type} agreement_type"
    );
    $types = $query->fetchAllAssoc('name', PDO::FETCH_ASSOC);
    if (!empty($types)) {
      foreach ($types as $name => $info) {
        $info['settings'] = unserialize($info['settings']);
        $config = config('agreement_type.' . $name);
        $config->setData($info);
        $config->save();
      }
    }
  }
}
