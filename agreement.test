<?php
// $Id$

/**
 * @file
 * Tests for the Agreement module
 */

class AgreementTestCase extends DrupalWebTestCase {
  protected $base_url;
  protected $site_name;
  protected $privileged_user;
  protected $unprivileged_user;
  protected $page_title;
  protected $page_text;
  protected $not_set;

  public function setUp() {
    parent::setUp('agreement');

    global $base_url;
    $this->base_url = $base_url;
    $this->site_name = ' | ' . variable_get('site_name', 'Drupal');
    $this->page_title = $this->randomName(8);
    $this->page_text = $this->randomName(16);
    $this->not_set = $this->randomName(32);

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array('configure agreement settings'));
    $this->drupalLogin($this->privileged_user);

    // Configure agreement settings
    $this->drupalGet('admin/settings/agreement');
    $this->assertResponse(200, t('User is allowed to access agreement settings page.'));
    $settings = array();
    $settings['agreement_role'] = '2';
    $settings['agreement_text'] = $this->page_text;
    $settings['agreement_page_title'] = $this->page_title;
    $settings['agreement_page_url'] = 'agreement';
    $settings['agreement_message_success'] = 'Thank you for accepting our agreement!';
    $settings['agreement_message_failure'] = 'You must accept our agreement to continue!';
    $settings['agreement_checkbox_text'] = 'I agree.';
    $settings['agreement_submit_text'] = 'Submit';
    $settings['agreement_enforceable_pages'] = '*';

    $this->drupalPost('admin/settings/agreement', $settings, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved'), t('Agreement settings saved'));
  }

  protected function isAgreementPage() {

    $this->assertEqual($this->base_url . '/' . variable_get('agreement_page_url', $this->not_set), $this->getUrl(), t('URL of agreement is correct') . ': ' . $this->getUrl());
    $this->assertEqual($this->page_title, variable_get('agreement_page_title', $this->not_set), t('agreement_page_title_variable is set') . ': ' . $this->page_title);
    $this->assertTitle(variable_get('agreement_page_title', $this->not_set) . $this->site_name, t('Title of agreement page is correct'));
    $this->assertText(variable_get('agreement_checkbox_text', $this->not_set), t('Checkbox text is correct'));

  }

  protected function isNotAgreementPage() {

    $this->assertNotEqual($this->base_url . '/' . variable_get('agreement_page_url', $this->not_set), $this->getUrl(), t('Not on agreement page') . ': ' . $this->getUrl());
  }

  protected function submitAgreementForm($uid) {

    // Try to submit without checking the I agree box
    $field_values = array();
    $field_values['uid'] = $uid;
    $this->drupalPost('agreement', $field_values, variable_get('agreement_submit_text', $this->not_set));
    $this->assertText(variable_get('agreement_message_failure', $this->not_set), t('Correct error message'));

    // Submit with checking the I agree box
    $field_values['agree'] = '1';
    $this->drupalPost('agreement', $field_values, variable_get('agreement_submit_text', $this->not_set));
    $this->assertText(variable_get('agreement_message_success', $this->not_set), t('Correct success message'));
    $this->isNotAgreementPage();
  }
}

class AgreementSettingsTestCase extends AgreementTestCase {
  
  public static function getInfo() {
    return array(
      'name' => '1. Agreement settings',
      'description' => 'Ensure that the agreement settings page functions properly for the admin user.',
      'group' => 'Agreement',
    );
  }
  
  // Configure the agreement settings
  public function testAgreementSettings() {

    // After save, re-open agreement settings
    $this->assertEqual($this->getUrl(), $this->base_url . '/admin/settings/agreement', t('URL of settings page is correct') . ': ' . $this->getUrl());
    $this->assertTitle(t('Agreement settings') . $this->site_name, t('Page title of settings page is correct'));

    // Go anywhere else, open agreement
    $this->drupalGet('admin');
    $this->isAgreementPage();

    // Try to go somewhere without submitting
    $this->drupalGet('node/add');
    $this->isAgreementPage();

    // Try submitting agreement form
    $this->submitAgreementForm($this->privileged_user->uid);

    $this->drupalGet('admin');
    $this->isNotAgreementPage();
  }
}

class AgreementAgreementTestCase extends AgreementTestCase {

  public static function getInfo() {
    return array(
      'name' => '2. Agreement page',
      'description' => 'Ensure that the agreement page functions properly for the end user.',
      'group' => 'Agreement',
    );
  }

  // Test the agreement page
  public function testAgreement() {

    // Create and log in our unprivileged user.
    $this->unprivileged_user = $this->drupalCreateUser();
    $this->drupalLogin($this->unprivileged_user);

    // Sent to agreement page
    $this->isAgreementPage();

    // Try submitting agreement form
    $this->submitAgreementForm($this->unprivileged_user->uid);

    $this->drupalGet('admin/settings/agreement');
    $this->assertResponse(403, t('User is not allowed to access agreement settings page.'));
  }
}

  /*
   * Other things to test
   *
   * - if original URL is /node/add or something similar, then test to ensure that after submitting agreement page user is redirected to node/add
   * - similarly if user is accessing the site via one-time URL they should be redirected to change password page after logging in
   * - how to determine % of test coverage?
   * - test exceptions
   * - test with different roles (roles in db should be out of order - see issue on d.o)
   * - test anonymous user - how?
   * - run through coder module
   * 
   * Simpletest issues
   * - http://drupal.org/node/789192: Tests are listed in alphabetical order (would it make more sense to list them in the order they are defined in the .test file?)
   * - http://drupal.org/node/789188: No way to disable clear results after each complete test suite run: Even if you disable the "Clear results after each complete test suite run" option under settings, the simpletest_ tables are all removed from the db after the tests are run. Tested in 6.x-2.10 and 6.x-2.x-dev 3/15/2010.
   */